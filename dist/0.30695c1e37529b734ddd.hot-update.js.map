{"version":3,"file":"0.30695c1e37529b734ddd.hot-update.js","sources":["webpack:///src/states/Game.js?2998"],"sourcesContent":["/* globals __DEV__ */\nimport Phaser from 'phaser';\nimport StaticAsset from '../sprites/staticAsset';\nimport Player from '../sprites/player';\nimport config from '../config';\nimport getRandomInt from '../functions/getRandomInt';\nimport state from './state';\n\nconst HEIGHT = config.gameHeight;\nconst WIDTH = config.gameWidth;\n\n/*\nconst playerHighestScore = gameData.gameHighestScore !== null\n  ? gameData.gamHighestScore\n  : 0;\n*/\n//console.log(40, gameData.gameHighestScore);\n\nexport default class GameState extends Phaser.State {\n  init() {\n    this.speed = state.speed;\n\n    //initial physics in world\n    this.physics.startSystem(Phaser.Physics.ARCADE);\n\n    //initialize properties for generating ledges\n    let ledgeXPosition = 50;\n    let ledgeYPosition = HEIGHT / 2;\n    let ledgeIndex = 0;\n    let neighbourLedgeHeightDifference = 50;\n\n    //generate ledge and add it to ledge group\n    this.generateLedges = () => {\n      console.log(\n        'ledge',\n        ledgeIndex,\n        ' ',\n        ledgeXPosition,\n        ', ',\n        JSON.stringify(ledgeYPosition)\n      );\n      this.ledge = new StaticAsset({\n        game: this,\n        x: ledgeXPosition,\n        y: ledgeYPosition,\n        asset: 'platform',\n      });\n      this.add.existing(this.ledge);\n      this.ledge.body.checkCollision.down = false;\n      this.ledge.body.checkCollision.left = false;\n      this.ledges.add(this.ledge);\n      ledgeIndex++;\n      //get position for the next ledge to be generated.\n      //if positionY is too high then go lower.\n      //if positionY is too low then go higher.\n\n      if (ledgeIndex <= 3) {\n        ledgeXPosition = ledgeXPosition + 295;\n        this.ledge.scale.setTo(0.65, 0.9);\n      } else {\n        ledgeXPosition = WIDTH + 150;\n        this.ledge.scale.setTo(0.5, 0.9);\n      }\n\n      if (ledgeYPosition < HEIGHT - 100 && ledgeYPosition > 100) {\n        ledgeYPosition = ledgeYPosition +\n          getRandomInt(\n            -neighbourLedgeHeightDifference,\n            neighbourLedgeHeightDifference\n          );\n      } else if (ledgeYPosition > HEIGHT - 100) {\n        ledgeYPosition = ledgeYPosition +\n          getRandomInt(-neighbourLedgeHeightDifference, 0);\n      } else {\n        ledgeYPosition = ledgeYPosition +\n          getRandomInt(0, neighbourLedgeHeightDifference);\n      }\n    };\n  }\n  preload() {}\n\n  create() {\n    //create ledge group\n    this.ledges = this.add.group();\n    this.physics.arcade.enable(this.ledges);\n    this.ledges.enableBody = true;\n\n    //generate initial ledges\n    for (let i = 0; i <= 3; i++) {\n      this.generateLedges();\n    }\n\n    //set the rate to generate ledges\n    //and generate ledges\n    this.ledgeGenerationRate = 1;\n    this.game.time.events.loop(\n      Phaser.Timer.SECOND * (2.5 - this.ledgeGenerationRate),\n      () => {\n        state.speed = Number((state.speed * 1.01).toFixed(3));\n        this.generateLedges();\n      }\n    );\n\n    //create player\n    this.player = new Player({\n      game: this.game,\n      x: 150,\n      y: 30,\n      asset: 'dude',\n    });\n    this.add.existing(this.player);\n\n    //create score\n    this.score = this.game.add.text(WIDTH / 2, 30, 'score: 0', {\n      font: '32px',\n      fill: 'black',\n    });\n    this.timer = 0;\n\n    this.game.time.events.loop(Phaser.Timer.SECOND * 1, () => {\n      this.timer += 100;\n      this.score.text = 'score: ' + this.timer;\n    });\n  }\n\n  update() {\n    this.physics.arcade.collide(this.player, this.ledges);\n    this.ledgeGenerationRate += 0.00213;\n\n    //game over if player falls out of bottom of screen\n    if (this.player.position.y > HEIGHT + 250) {\n      //check score\n\n      //go to game over stage\n      this.state.start('Gameover');\n    }\n  }\n\n  render() {}\n}\n\n\n\n// WEBPACK FOOTER //\n// src/states/Game.js"],"mappings":";;;;;;;;;;;;;;;;;;;AACA;AACA;;;AAAA;AACA;;;AAAA;AACA;;;AAAA;AACA;;;AAAA;AACA;;;AAAA;AACA;;;;;;;;;AAPA;AACA;AACA;AAMA;AACA;AACA;AACA;;;;;AAKA;AACA;AACA;;;;;;;;;;;AACA;AAAA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAQA;AACA;AACA;AACA;AACA;AAJA;AAMA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAKA;AACA;AAEA;AACA;AAEA;AACA;AACA;;;AACA;;;AAEA;AAAA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAJA;AAMA;AACA;AACA;AACA;AACA;AACA;AAFA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAEA;;;;AAxHA;AACA;AADA;;;;A","sourceRoot":""}